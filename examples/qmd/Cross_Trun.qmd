---
title: "Truncated Normal Distribution(Cross)"
format:
    html:
        code-fold: false
jupyter: julia-1.9
---

## activate the local environment
```{julia}
using Pkg; Pkg.activate("..")

using StochasticFrontiers;
```


## Example: Truncated Normal, Wang 2002
```{julia}
res = sfmodel_fit(
    spec = sfspec(
        data      = "data/sampledata.csv", 
        model     = Cross(), 
        type      = Prod(), 
        dist      = Trun(μ = (:age, :school, :yr, :_cons), σᵤ² = (:age, :school, :yr, :_cons)),
        σᵥ²       = :_cons, 
        depvar    = :yvar, 
        frontiers = (:Lland, :PIland, :Llabor, :Lbull, :Lcost, :yr, :_cons)
    ),
    options = sfopt(warmstart_maxIT = 400),
    init = sfinit(
        μ       = fill(0.1, 4), 
        log_σᵤ² = fill(-0.1, 4), 
        log_σᵥ² = -0.1
    )
);
```


```{julia}
sfcheck_converge(res)
```


```{julia}
options = sfoptions(res)
Dict{Symbol, Any}(zip(keys(options), values(options)))
```


## comparison between initial condition and the maximum likelihood estimator
```{julia}
[sfmodel(res).paramnames  sfstartpt(res) sfmaximizer(res)]
```

## frequency plot of the jlms and bc index
```{julia}
plot_inefficieny(res)
```


## mean marginal effect
```{julia}
marginal, marginal_mean = sfmarginal(res)
Dict{Symbol, Float64}(zip(keys(marginal_mean), values(marginal_mean)))
```


## bootstrap std of mean marginal effect
```{julia}
std_ci, bsdata = sfmarginal_bootstrap(res, R = 250, seed = 123);
```


## bootstrap confidence interval of the mean marginal effect 
- significance level(α) = 0.1
```{julia}
ci = sfCI(bsdata, marginal_mean, level = 0.1)
```
